Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int count1=0,count2=0, element1=-1,element2=-1;

        for (int i=0;i<nums.size();i++){
            if (count1 ==0 && nums[i] != element2){
                element1 = nums[i];
                count1 =1;
            }

            else if (count2 == 0 && nums[i] != element1){
                element2 = nums[i];
                count2 = 1;
            }

            else if (nums[i] == element1){
                count1++;
            }

            else if (nums[i] == element2){
                count2++;
            }
            else {
                count1--;
                count2--;
            }
        }
        vector<int> ans;
        count1 =0,count2 =0;
        for (int i = 0;i<nums.size();i++){
            if (nums[i] == element1){
                count1++;
            }

            else if (nums[i] == element2){
                count2++;
            }
        }
        int n = nums.size();
        if (count1 > n/3){
            ans.push_back(element1);
        }
        if (count2 > n/3){
            ans.push_back(element2);
        }
        return ans;
    }
};
