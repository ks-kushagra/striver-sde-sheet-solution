Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    set<vector<int>> ans;

    void solve(vector<int> nums, int index){
        if (index == nums.size()){
            return;
        }
        ans.insert(nums);
        for (int i = index;i<nums.size();i++){
            swap(nums[i], nums[index]);
            solve(nums,index+1);
            swap(nums[i], nums[index]);
        }
    }


    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        int n = nums.size();
        if (n == 0){
            return res;
        }
        solve(nums, 0);
        for (auto it = ans.begin(); it != ans.end(); it++){
            res.push_back(*it);
        }
        return res;
    }
};
