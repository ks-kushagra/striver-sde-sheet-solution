Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> ans;
        int size = intervals.size();
        if (size <=1){
            return intervals;
        }
        ans.push_back(intervals[0]);
        
        for(int i =1;i<size;i++){
            if (intervals[i][0] >= ans[ans.size()-1][0] && intervals[i][0] <= ans[ans.size()-1][1]){
                ans[ans.size()-1][1] = max(ans[ans.size()-1][1], intervals[i][1]);
            }
            else{
                ans.push_back(intervals[i]);
            }
        }
        return ans;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        int size = intervals.size();

        if (size <=1){
            return intervals;
        }
        vector<vector<int>> ans;
        int i=0;
        while(i<size){
            int j = i+1;
            int min_i = intervals[i][0];
            int max_j = intervals[i][1];
            while(j<size){
                if (intervals[j][0]>= min_i && intervals[j][0] <= max_j){
                    max_j = max(max_j, intervals[j][1]);
                    min_i = min(min_i, intervals[j][0]);
                }
                else {
                    vector<int> t(2);
                    t[0] = min_i;
                    t[1] = max_j;
                    ans.push_back(t);
                    i = j;
                    break;
                }
                j++;
            }

            if (j == size){
                    vector<int> t(2);
                    t[0] = min_i;
                    t[1] = max_j;
                    ans.push_back(t);
                    break;
            }
        }
        return ans;
    }
};
