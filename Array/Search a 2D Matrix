Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& A, int B) {
        int m = A.size();
        int n = A[0].size();
        int row=0;
        int col=0;
        int start =0 , end = m-1;
        while(start<=end){
            int mid = (start+end)/2;
            
            if(A[mid][n-1] < B){
                start = mid+1;
            }else{
                row = mid;
                end = mid-1;
            }
        }
        
        start=0,end=n-1;
        while(start<=end){
            int mid = (start+end)/2;
            
            if(A[row][mid] < B){
                start = mid+1;
            }else{
                col = mid;
                end = mid-1;
            }
        }
        return A[row][col] == B;
    }
};
