Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Approach 1 
In the previous approach, we were marking the row and column with -1 while traversing the matrix. Here we will reduce the time complexity by marking the cells after the traversal.

Approach (Using two extra arrays):

The steps are as follows:

First, we will declare two arrays: a row array of size N and a col array of size M and both are initialized with 0.
Then, we will use two loops(nested loops) to traverse all the cells of the matrix.
If any cell (i,j) contains the value 0, we will mark ith index of row array i.e. row[i] and jth index of col array col[j] as 1. It signifies that all the elements in the ith row and jth column will be 0 in the final matrix.
We will perform step 3 for every cell containing 0.
Finally, we will again traverse the entire matrix and we will put 0 into all the cells (i, j) for which either row[i] or col[j] is marked as 1.
Thus we will get our final matrix.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach 2
In the previous approach, the time complexity is minimal as the traversal of a matrix takes at least O(N*M)(where N = row and M = column). In this approach, we can just improve the space complexity. So, instead of using two extra matrices row and col, we will use the 1st row and 1st column of the given matrix to keep a track of the cells that need to be marked with 0. But here comes a problem. If we try to use the 1st row and 1st column to serve the purpose, the cell matrix[0][0] is taken twice. To solve this problem we will take an extra variable col0 initialized with 1. Now the entire 1st row of the matrix will serve the purpose of the row array. And the 1st column from (0,1) to (0,m-1) with the col0 variable will serve the purpose of the col array.


If any cell in the 0th row contains 0, we will mark matrix[0][0] as 0 and if any cell in the 0th column contains 0, we will mark the col0 variable as 0.

Thus we can optimize the space complexity.

Approach: 

The steps are as follows:

First, we will traverse the matrix and mark the proper cells of 1st row and 1st column with 0 accordingly. The marking will be like this: if cell(i, j) contains 0, we will mark the i-th row i.e. matrix[i][0] with 0 and we will mark j-th column i.e. matrix[0][j] with 0.
If i is 0, we will mark matrix[0][0] with 0 but if j is 0, we will mark the col0 variable with 0 instead of marking matrix[0][0] again.
After step 1 is completed, we will modify the cells from (1,1) to (n-1, m-1) using the values from the 1st row, 1st column, and col0 variable.
We will not modify the 1st row and 1st column of the matrix here as the modification of the rest of the matrix(i.e. From (1,1) to (n-1, m-1)) is dependent on that row and column.
Finally, we will change the 1st row and column using the values from matrix[0][0] and col0 variable. Here also we will change the row first and then the column.
If matrix[0][0] = 0, we will change all the elements from the cell (0,1) to (0, m-1), to 0.
If col0 = 0, we will change all the elements from the cell (0,0) to (n-1, 0), to 0.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:

        void markColumnZero(vector<vector<int>>& matrix, int col){
        for(int row = 0; row<matrix.size();row++){
            matrix[row][col] = 0;
        }
    }


    void setZeroes(vector<vector<int>>& matrix) {
        int row_size = matrix.size();

        if (row_size == 0){
            return ;
        }
        int col_size = matrix[0].size();
        /*vector<pair<int,int>> zeroCord;
        for (int row = 0; row <row_size;row++){
                for(int col =0;col< col_size; col++){
                    if (matrix[row][col] == 0){
                        zeroCord.push_back(pair<int,int>(row,col));
                    }
                }
        }

        vector<int> zeroRow(col_size, 0);

        for(int i =0;i<zeroCord.size();i++){
            int row = zeroCord[i].first;
            int col = zeroCord[i].second;

            matrix[row] = zeroRow;
            markColumnZero(matrix, col);
        }*/

        int col0 = 1;
        for (int i=0;i<row_size;i++){
            for (int j=0;j<col_size;j++){

                if (matrix[i][j] == 0){
                    matrix[i][0] =0;

                    if (j!=0){
                    matrix[0][j] =0;
                    } else{
                        col0 =0;
                    }
                } 
            }
        }

        for (int i = 1;i<row_size;i++){
            for(int j=1;j<col_size;j++){
                if (matrix[i][j] != 0){
                    if (matrix[0][j]==0 || matrix[i][0]==0){
                        matrix[i][j] =0;
                    }
                }
            }
        }

        if (matrix[0][0] == 0){
            matrix[0] = vector<int> (col_size, 0);
        }

        if (col0 == 0){
            for(int i=0;i<row_size;i++){
                matrix[i][0] = 0;
        }
        }
    }
};






