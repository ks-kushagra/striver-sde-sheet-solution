You are given a read only array of n integers from 1 to n.

Each integer appears exactly once except A which appears twice and B which is missing.

Return A and B.

Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Note that in your output A should precede B.

Example:

Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define lli long long int 
vector<int> Solution::repeatedNumber(const vector<int> &A) {
    int n = A.size();
    lli sumDiff=0 , sqSumDiff=0;
    
    for(int i=1;i<=n;i++){
        sumDiff -= A[i-1];
        sumDiff += i;

        sqSumDiff -= (lli)A[i-1] * (lli)A[i-1];
        sqSumDiff += (lli)i*(lli)i;
    } 

     sqSumDiff /= sumDiff; 

     vector<int> ans;
     ans.push_back((sqSumDiff - sumDiff)/2);
     ans.push_back((sqSumDiff + sumDiff)/2);
    return ans;
}
